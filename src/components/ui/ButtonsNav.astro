---
import type { HTMLAttributes } from "astro/types";

const { href, className, language } = Astro.props as Props;

interface SubLink {
  Subtitle: string;
  options: string[];
  href: string;
}
// or extend with an `interface`
interface Props extends HTMLAttributes<"a"> {
  myProp?: boolean;
  className?: string;
  language?: string;
}

interface Link {
  title: string;
  href: string;
  subLinks?: SubLink[];
}

let links: Link[];

if (language === "he") {
  links = [
    {
      title: "שירותים",
      href: "#services",
    },
    {
      title: "עבודות",
      href: "#works",
    },
    {
      title: "אודות",
      href: "#about",
    },
    {
      title: "צור קשר",
      href: "he/contact",
    },
  ];
} else {
  links = [
    {
      title: "Services",
      href: "#services",
    },
    {
      title: "Works",
      href: "#works",
    },
    {
      title: "About",
      href: "#about",
    },
    {
      title: "Contact",
      href: "/contact",
    },
  ];
}
---

<div
  class="buttons-nav"
  style={{
    alignItems: "center",
  }}
>
  {
    links.map((link) => (
      <a href={link.href} class="nav-link">
        <button class="buttonNav"> {link.title} </button>
      </a>
    ))
  }
  <div class="world-container">
    <button class="world buttonNav"
      ><svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        ><g
          fill="none"
          stroke="white"
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          ><path d="M3 12a9 9 0 1 0 18 0a9 9 0 0 0-18 0m.6-3h16.8M3.6 15h16.8"
          ></path><path d="M11.5 3a17 17 0 0 0 0 18m1-18a17 17 0 0 1 0 18"
          ></path></g
        ></svg
      ></button
    >
    <div id="dropdown" class="dropdown">
      <a href="/" class="buttonNav">English</a>
      <a href="/he" class="buttonNav">עברית</a>
    </div>
  </div>
</div>

<style>
  .world-container {
    position: relative;
    display: inline-block;
  }

  .world {
    background-color: transparent;
    border: none;
  }
  svg g {
    transition: all 0.3s ease 0s;
  }
  .world-container:hover .world svg g {
    stroke: #3a1fff;
  }

  .dropdown {
    display: none;
    position: absolute;
    background-color: transparent;
    min-width: 160px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    border: #3a1fff 3px solid;
    z-index: 1;
    color: white;
  }

  .dropdown a {
    color: black;
    padding: 12px 16px;
    text-decoration: none;
    display: block;
    color: white;
    stroke: 1px solid white;
  }

  .world-container:hover .dropdown {
    display: block;
  }

  .buttons-nav {
    display: flex;
    gap: 1rem;
    flex-direction: row;
  }

  .buttonNav {
    background-color: transparent;
    border: none;
    color: #fff;
    font-family: "Manrope", sans-serif;
    font-size: 1.25rem;
    font-style: normal;
    font-weight: 700;
    line-height: normal;
    transition: all 0.3s ease 0s;
    padding: 1rem 2rem;
    border-radius: 0.25rem;
  }

  .buttonNav:hover {
    background-color: #391fff22;
    color: #3a1fff;
  }

  .contact-button {
    border: 1px solid white;
  }

  .subtitle {
    color: #fff;
    font-family: "Manrope";
    font-size: 1rem;
    font-style: normal;
    font-weight: 700;
    line-height: normal;
    margin-bottom: 5rem;
  }

  .options {
    color: #c7c7c7;
    font-family: "Manrope" sans-serif;
    font-size: 1rem;
    font-style: normal;
    font-weight: 700;
    line-height: normal;
  }
</style>
<script>
  const navLinks = document.querySelectorAll(".nav-link");
  navLinks.forEach((link: Element) => {
    link.addEventListener("click", function (this: Element, e: Event) {
      const href = this.getAttribute("href");

      if (href && href.startsWith("#")) {
        e.preventDefault();

        // Check if the current path includes '/he'
        const isHebrew = window.location.pathname.includes("/he");

        // If on '/contact' page, redirect to home page with the same language
        if (window.location.pathname.includes("/contact")) {
          window.location.href = isHebrew ? "/he" + href : "/" + href;
        } else {
          const target = document.querySelector(href);

          if (target) {
            target.scrollIntoView({ behavior: "smooth" });
          }
        }
      }
    });
  });

  const worldButton = document.querySelector(".world") as HTMLElement | null;
  const dropdown = document.getElementById("dropdown") as HTMLElement | null;

  if (worldButton && dropdown) {
    worldButton.addEventListener("click", () => {
      if (dropdown.style.display === "block") {
        dropdown.style.display = "none";
      } else {
        dropdown.style.display = "block";
      }
    });
  }
</script>
